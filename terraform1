# Amazon EC2 Instance

provider "aws" {
  region = "us-east-1"  # Replace with your desired region
}

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  tags = {
    Name = "ExampleInstance"
  }
}
# AWS Lambda Function

resource "aws_lambda_function" "example_lambda" {
  filename      = "lambda_function_payload.zip"
  function_name = "example_lambda_function"
  handler       = "exports.handler"
  runtime       = "nodejs14.x"

  role = aws_iam_role.lambda_exec_role.arn

  source_code_hash = filebase64sha256("lambda_function_payload.zip")
}
# Amazon ECS Service

resource "aws_ecs_cluster" "example_cluster" {
  name = "example-cluster"
}

resource "aws_ecs_service" "example_service" {
  name            = "example-service"
  cluster         = aws_ecs_cluster.example_cluster.id
  task_definition = aws_ecs_task_definition.example_task_definition.arn
  desired_count   = 1

  network_configuration {
    subnets = ["subnet-12345678"]
    security_groups = ["sg-87654321"]
  }
}
# Amazon S3 Bucket

resource "aws_s3_bucket" "example_bucket" {
  bucket = "example-bucket"
  acl    = "private"
}
# Amazon RDS (MySQL Example)

resource "aws_db_instance" "example_db" {
  identifier             = "example-db"
  allocated_storage      = 20
  storage_type           = "gp2"
  engine                 = "mysql"
  engine_version         = "5.7"
  instance_class         = "db.t2.micro"
  name                   = "exampledb"
  username               = "admin"
  password               = "password"
  parameter_group_name   = "default.mysql5.7"
}
# Amazon VPC

resource "aws_vpc" "example_vpc" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "example_subnet" {
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "10.0.1.0/24"
}
# Amazon Route 53 (DNS Example)

resource "aws_route53_zone" "example_zone" {
  name = "example.com"
}

resource "aws_route53_record" "example_record" {
  zone_id = aws_route53_zone.example_zone.zone_id
  name    = "www"
  type    = "A"
  ttl     = "300"
  records = ["${aws_instance.example.public_ip}"]
}
# AWS CloudFormation

resource "aws_cloudformation_stack" "example_stack" {
  name = "example-stack"
  template_body = file("cloudformation_template.yml")
}
# AWS CloudWatch

resource "aws_cloudwatch_metric_alarm" "example_alarm" {
  alarm_name          = "example-alarm"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods  = "2"
  metric_name         = "CPUUtilization"
  namespace           = "AWS/EC2"
  period              = "300"
  statistic           = "Average"
  threshold           = "80"

  dimensions {
    InstanceId = aws_instance.example.id
  }

  alarm_actions = ["${aws_sns_topic.example_topic.arn}"]
}
#  AWS IAM 

resource "aws_iam_user" "example_user" {
  name = "example-user"
}

resource "aws_iam_group" "example_group" {
  name = "example-group"
}

resource "aws_iam_policy" "example_policy" {
  name        = "example-policy"
  description = "Example IAM policy"
  policy      = file("example_policy.json")
}
# AWS Elastic Beanstalk

resource "aws_elastic_beanstalk_application" "example_app" {
  name = "example-app"
}

resource "aws_elastic_beanstalk_environment" "example_env" {
  name                = "example-env"
  application         = aws_elastic_beanstalk_application.example_app.name
  solution_stack_name = "64bit Amazon Linux 2 v5.4.5 running Node.js"
}


